/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace org.agora

/*
Participants:

- Citizens: These participants can issue anonymous votes and delegate on politicians.
- Politicians: These participants can be delegated on by citizens, and can issue public votes. The way a member of the blockchain declares himself a politician requires the issuing of a new identity, and will be done outside the blockchain itself (but still through the API).
- Legislators: These participants can create, open, and close elections.
*/

participant Citizen identified by idCitizen {
  o String idCitizen
  o String name
}

participant Politician identified by idPolitician{
  o String idPolitician
  o String name
  o String information
}

participant Legislator identified by idLegislator{
  o String idLegislator
  o String name
}

/*
Assets

These objects represent the (intangible) goods used in the system.

- Election: This asset represents a voting process, it's owned by one legislator.
- PublicVote: This asset represents a public vote, it's owned by a politician.
- AnonymousVote: This asset represents an anonymous vote, it doesn't have an owner but can be indexed by the secretVoterID (hash(voterID+password)).
- Representation: This asset represents a relationship of trust between a citizen and a politician.
*/

asset Election identified by idElection{
  o String idElection
  o String description
  o String category
  o String[] options
  o String result
  o Boolean closed
  --> Legislator Owner
}

asset PublicVote identified by idVote{
  o String idVote
  o String choice
  --> Politician voter
  --> Election elections
}

asset AnonymousVote identified by idVote{
  o String idVote
  o String choice
  o String secretVoterID
  --> Election elections
}

asset Representation identified by idRepresentation{
  o String idRepresentation
  o String[] restrictions
  --> Citizen trustee
  --> Politician trusted
}

/*
Transactions
  - Trust: Creates a Representation asset between the Citizen and a Politician. 
  - NullTrust: Deletes the Representation asset between the Citizen and his current representative.
  - Anonymous vote: Creates or modifies (if the citizen has already voted) the Vote asset by the Citizen, related to an Election asset.
  - Public vote: Creates or modifies (if the politician has already voted) the Vote by the Politician, related to an Election asset.
  - Create elections: Creates an Election asset.
  - Open elections: Allows votes on an Election asset.
  - Close elections: Stops allowing votes on an Election asset.
*/

transaction tx_trust {
  o String[] restrictions
  --> Citizen trustee
  --> Politician trusted
}

transaction tx_nulltrust {
  --> Representation representationToNull
}

transaction tx_createElections{
  o String description
  o String[] options
  o String category
  --> Legislator owner
}

transaction tx_openElections{
  --> Election elections
}

transaction tx_closeElections{
  --> Election elections
}

transaction tx_publicVote{
  o String choice
  --> Election elections
  --> Politician voter
}

transaction tx_secretVote{
  o String choice
  o String secretVoterID
  --> Election elections
}