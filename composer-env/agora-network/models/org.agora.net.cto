/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace org.agora.net

abstract participant Person identified by id{
  o String id
  o String name
  o String lastname
}

participant Citizen extends Person {
  --> Politician representation optional
}

participant Politician extends Person{
  o String info optional
}

participant Legislator extends Person {
}

asset Election identified by electionID{
  o String electionID
  o String description
  o String category
  o String[] options
  o String[] writeins optional //holds all write-in values an user has set, including blank votes which will be saved as ""
  o Integer[] results optional //holds the number of votes for each option and write-in, in the order established by the String arrays
  o Boolean closed default=true optional
  --> Legislator owner
}

asset Vote identified by voteID{
  o String voteID
  o String choice default="" optional //optionality represents blank vote
  --> Election election
  --> Politician voter optional //only set if the vote has been issued by a politician
}

/*
* This asset represents the concept of an "outer envelope" used in mail voting.
* The vote itself (Vote) is anonymous for citizens (voter won't be set)
* but the envelope is identified to avoid double voting, false voters, etc. 
*
* Any access to this asset will be restricted except for its owner (voter) or validator nodes.
*/
asset Envelope identified by envelopeID{
  o String envelopeID
  --> Citizen voter
  --> Election election
  --> Vote vote optional //optionality is set to allow creating of the envelope but not voting
}

/**
* This asset represents the restrictions that can be applied to a Representation
* they contain a choice and a category, so that if the trusted ever votes that choice
* in an election with that category, the Representation will be automatically nulled.
 */
asset Restriction identified by restrictionID{
  o String restrictionID
  o String category
  o String choice
  --> Citizen trustee
}

transaction TX_Trust {
  --> Citizen trustee
  --> Politician trusted
}

transaction TX_AddRestriction{
  o String restrictionID  
  o String category
  o String choice
  --> Citizen trustee
}

transaction TX_RemoveRestriction{
  --> Restriction restriction
}

transaction TX_Nulltrust {
  --> Citizen representedToNull
}

transaction TX_CreateElection{
  o String electionID //blockchain requires a deterministic ID, so the ID should be created on the client side
  o String description
  o String[] options
  o String category
  --> Legislator owner
}

transaction TX_OpenElection{
  --> Election election
}

transaction TX_CloseElection{
  --> Election election
}

transaction TX_PublicVote{
  o String choice default="" optional //optionality represents blank vote
  --> Election election
  --> Politician voter
}

/*
* This transaction creates the outer, identified envelope that allows secret voting.
* The vote will be "introduced" in the envelope in the TX_SecretVote stage, so that
* no information about the choice of this voter leaks.
*
* TODO: can this transaction be public? (probably no)
*/
transaction TX_PrepareEnvelope{
  o String envelopeID
  --> Citizen voter
  --> Election election
}
/**
* In this transaction the secret vote is set and placed inside the envelope.
* The envelope can already contain a vote, in which case its a change of vote.
* 
* TODO: can this transaction be public? (probably no, definitely not its issuer)
 */
transaction TX_SecretVote{
  o String choice optional //optionality represents blank vote
  --> Envelope envelope
}