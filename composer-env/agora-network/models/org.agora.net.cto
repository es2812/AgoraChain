/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Write your model definitions here
 */

namespace org.agora.net

abstract participant Person identified by id{
  o String id
  o String name
  o String lastname
}

participant Citizen extends Person {
}

participant Politician extends Person{
  o String info optional
}

participant Legislator extends Person {
}

asset Election identified by electionID{
  o String electionID
  o String description
  o String category
  o String[] options
  o String result default="" optional
  o Boolean closed default=true optional
  --> Legislator owner
}

abstract asset Vote identified by voteID{
  o String voteID //will be politicianID+electionsID or anonymousHash
  o String choice optional //optionality represents blank vote
  --> Election elections
}

asset PublicVote extends Vote{
  --> Politician voter
}

asset AnonymousVote extends Vote{
}

asset Representation identified by trusteeID{
  o String trusteeID
  o String[] restrictions optional
  --> Citizen trustee
  --> Politician trusted
}

/**
  * This transaction represents that the voter has voted in the elections. 
  * Viewing this transaction will only be allowed for the validator nodes.
  *
  * This transaction returns a ballotID which the voter can use to vote
  * and change their vote via the SecretVote transaction.
 */
@returns(String)
transaction TX_Registry{
  o String secret //used to generate the ballotID, recommended a random string (can be generated in client side)
  --> Citizen voter 
  --> Election elections
}

/**
  * This asset represents a ballot "given" to the citizen after they have registered
  * that they're going to vote.
  *
  * Its purpose is to check whether a citizen has already voted in an election,
  * thus changing his vote on the next AnonymousVote transaction, or not counting
  * their representation's vote.
  *
  * It is indexed by the hash(ballotID+voterID) since that is the identifier the citizen
  * will use to vote, and this simplifies the access.
  *
  * This asset must be kept secret except for validator nodes.
 */
asset Ballot identified by anonymousHash{
  o String anonymousHash //hash(ballotID+voterID)
  --> Citizen voter
  --> Election elections
}

transaction TX_Trust {
  o String[] restrictions optional
  --> Citizen trustee
  --> Politician trusted
}

transaction TX_Nulltrust {
  --> Representation representationToNull
}

transaction TX_CreateElections{
  o String electionID //blockchain requires a deterministic ID, so the ID should be created on the client side
  o String description
  o String[] options
  o String category
  --> Legislator owner
}

transaction TX_OpenElections{
  --> Election elections
}

transaction TX_CloseElections{
  --> Election elections
}

transaction TX_PublicVote{
  o String choice optional //optionality represents blank vote
  --> Election elections
  --> Politician voter
}

transaction TX_SecretVote{
  o String choice optional //optionality represents blank vote
  o String anonymousHash //hash(voterID+ballotID) calculated on client side
  --> Election elections
}

transaction SampleDemo {
}
